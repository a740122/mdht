#!/usr/bin/env python2
import pickle

from twisted.web.xmlrpc import Proxy
from twisted.internet import reactor
from twisted.python import log

def _print(x):
    print x
    return x

class RPCClient(object):
    def __init__(self, addr_str='http://localhost:5000'):
        self.proxy = Proxy(addr_str)

    def start_client(self):
        reactor.run()

    def stop_client(self):
        reactor.stop()

    def ping(self, address_str):
        log.msg('sending a kademlia ping query to {0}'.format(address_str))
        return self._call('ping', address_str)

    def find_node(self, address_str, node_id):
        log.msg('sending a kademlia find_node query '
            'to {0} looking for a node id of {1}'
            .format(address_str, node_id))
        s_node_id = self._serialize(node_id)
        return self._call('find_node', address_str, s_node_id)

    def find_iterate(self, target_id, nodes=None):
        log.msg('doing an iteration of kademlia find_node queries '
            'towards target ({0})'.format(target_id))
        s_target_id = self._serialize(target_id)
        s_nodes = self._serialize(nodes)
        return self._call('find_iterate', s_target_id, s_nodes)

    def grab_nodes(self):
        return self._call('grab_nodes')

    def _deserialize(self, serial_val):
        return pickle.loads(serial_val)

    def _serialize(self, val):
        return pickle.dumps(val)

    def _call(self, funcname, *args, **kwargs):
        d = self.proxy.callRemote(funcname, *args, **kwargs)
        d.addBoth(self._deserialize)
        d.addBoth(_print)
        return d


if __name__ == "__main__":
    address_str = 'weezy.us:1337'
    target_id = 5
    rpc_client = RPCClient()
    #rpc_client.ping(address_str)
    d = rpc_client.grab_nodes()
    d = d.addCallback(lambda nodes:
        rpc_client.find_iterate(target_id, nodes))
    #rpc_client.find_node(address_str, target_id)

    # // TODO clean shutdown
    rpc_client.start_client()
